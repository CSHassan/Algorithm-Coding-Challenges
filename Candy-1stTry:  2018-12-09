  ** first try for the hackerrank question :https://www.hackerrank.com/challenges/candies/problem
     Timed myself (34 min) and got 1/3 test cases then took a look at some of the discussion to find that you need to do two traversals which made more sense.
  
  static long candies(int n, int[] arr)
        {
            int total = 0;
            int[] newarr = new int[n];

           
            int cand = 1;
            int lenght = arr.Length;

            if (arr[0] < arr[1])
            {
                newarr[0] = cand;
            }
            else
            {
                cand++;
                newarr[0] = cand;
            }
            if (arr[lenght - 1] > arr[lenght - 2])
            {

                cand++;
                newarr[lenght - 1] = cand;
            }
            else
            {
                newarr[lenght - 1] = cand;

            }
            int candy = 1;

            for (int i = 1; i < arr.Length-1; i++)
            {

                //{ 4, 6, 4, 5, 6, 2 };


                if (arr[i - 1] < arr[i] && arr[i] < arr[i + 1])// and if the child has better score then previous and the next child , give him more candies
                {

                    candy++;
                    newarr[i] = newarr[i]+1;
                }

                else if (arr[i] > arr[i + 1])// if he has higher score then the next child , give him a extra candy
                {

                   candy++;
                    newarr[i] = newarr[i] + 1;
                }

                else if (arr[i - 1] > arr[i])//if he has less score than the previous child do nothing
                {

                    newarr[i] = candy;
                }

                else
                {
                    newarr[i] = candy;
                }





            }// end of for loop

          

            for (int j = 0; j < arr.Length; j++)
            {
           
              Console.WriteLine(newarr[j]);
                total = total + newarr[j];
            }


            return total;
        }
